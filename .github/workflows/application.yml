name: 'Application'
"on":
  push:
    branches:
      - master
      - next
      - main
      - beta
      - "*.x"

jobs:
  npm-build:
    runs-on: ubuntu-latest
    env:
       working-directory: ./services/frontend
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set short sha
        id: sha_short
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: NPM install step
        run: |
          npm install
        working-directory: ${{env.working-directory}}

      - uses: paulhatch/semantic-version@v5.3.0
        with:
          tag_prefix: "v"

      - name: Tar files
        run: |
          tar -czvf application.tar.gz services/frontend/*

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: node-app
          path: application.tar.gz
          retention-days: 5

    outputs:
      sha_short: ${{ steps.sha_short.outputs.sha_short }}

  docker-build:
    runs-on: ubuntu-latest
    needs: npm-build
    env:
       working-directory: .
    steps:
      - name: Download a NPM artifact
        uses: actions/download-artifact@v3
        with:
          name: node-app

      - name: Set short sha
        id: sha_short
        run: |
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "git_tag=$(git tag)" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: docker.pkg.github.com
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          push: true
          tags: |
#             docker.pkg.github.com/${{ github.repository }}/frontend:${{ github.sha }}
            docker.pkg.github.com/${{ github.repository }}/frontend:${{ steps.sha_short.outputs.sha }}
#             docker.pkg.github.com/${{ github.repository }}/frontend:${{ github.event.release.tag_name }}
            docker.pkg.github.com/${{ github.repository }}/frontend:${{ steps.sha_short.outputs.git_tag }}

#       - name: Docker build and push
#         uses: docker/build-push-action@v4
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: ${{ needs.npm-build.outputs.sha_short }}
#         with:
#           context: ${{env.working-directory}}
#           file: ${{env.working-directory}}/Dockerfile
#           platforms: linux/amd64
#           push: true
#           tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
#           provenance: false
#
#       - name: Set docker image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: ${{ needs.npm-build.outputs.sha_short }}
#         id: image
#         run: |
#           echo "ecr_registry=$ECR_REGISTRY" >> $GITHUB_OUTPUT
#           echo "ecr_repository=$ECR_REPOSITORY" >> $GITHUB_OUTPUT
#           echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
#           cat $GITHUB_OUTPUT
#     outputs:
#       ecr_repository: ${{steps.image.outputs.ecr_repository}}
#       image_tag: ${{steps.image.outputs.image_tag}}